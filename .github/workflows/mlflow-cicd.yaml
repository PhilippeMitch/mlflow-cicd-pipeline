name: MLflow CI/CD

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: 'MLflow model name'
        default: 'adult-classifier'
        required: true
      version:
        description: 'Model version'
        default: '1.0.0'
        required: true
      stage:
        description: 'Model stage'
        required: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          MLFLOW_TRACKING_URI: http://localhost:5000
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          echo "Running tests for model: ${{ github.event.inputs.model_name }} version: ${{ github.event.inputs.version }}"
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "‚ùå SLACK_WEBHOOK_URL is not set"
          else
            echo "‚úÖ SLACK_WEBHOOK_URL is set"
          fi

          if [ -z "$SLACK_BOT_TOKEN" ]; then
            echo "‚ùå SLACK_BOT_TOKEN is not set"
          else
            echo "‚úÖ SLACK_BOT_TOKEN is set"
          fi
          pytest tests/test_model.py

      - name: Notify Slack (Test Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'mlflow-cicd'
          slack-message: |
            {
              "text": "üö® *Test stage failed* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}."
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Dev
        run: |
          mkdir -p kubernetes/backups
          cp kubernetes/dev-deployment.yaml kubernetes/backups/dev-deployment-backup.yaml || true
          kubectl apply -f kubernetes/dev-deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Notify Slack (Dev Success)
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'mlflow-cicd'
          text: 'Model deployed to Dev successfully: ${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }}'

      - name: Rollback Dev on Failure
        if: failure()
        run: |
          if [ -f kubernetes/backups/dev-deployment-backup.yaml ]; then
            kubectl apply -f kubernetes/backups/dev-deployment-backup.yaml
            echo "Rolled back Dev deployment to previous state."
          else
            echo "No backup found for Dev rollback."
          fi
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Notify Slack (Dev Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'mlflow-cicd'
          text: 'Dev deployment failed and rolled back for ${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }} in GitHub Actions: ${{ github.job }} #${{ github.run_number }}'

  deploy-uat:
    needs: deploy-dev
    if: github.event.inputs.stage == 'Production'
    runs-on: ubuntu-latest
    environment: uat  # Requires approval via GitHub environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to UAT
        run: |
          mkdir -p kubernetes/backups
          cp kubernetes/uat-deployment.yaml kubernetes/backups/uat-deployment-backup.yaml || true
          kubectl apply -f kubernetes/uat-deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Notify Slack (UAT Success)
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'mlflow-cicd'
          text: 'Model deployed to UAT successfully: ${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }}'

      - name: Rollback UAT on Failure
        if: failure()
        run: |
          if [ -f kubernetes/backups/uat-deployment-backup.yaml ]; then
            kubectl apply -f kubernetes/backups/uat-deployment-backup.yaml
            echo "Rolled back UAT deployment to previous state."
          else
            echo "No backup found for UAT rollback."
          fi
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Notify Slack (UAT Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'mlflow-cicd'
          text: 'UAT deployment failed and rolled back for ${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }} in GitHub Actions: ${{ github.job }} #${{ github.run_number }}'

  deploy-prod:
    needs: deploy-uat
    if: github.event.inputs.stage == 'Production'
    runs-on: ubuntu-latest
    environment: prod  # Requires approval via GitHub environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Prod
        run: |
          mkdir -p kubernetes/backups
          cp kubernetes/prod-deployment.yaml kubernetes/backups/prod-deployment-backup.yaml || true
          kubectl apply -f kubernetes/prod-deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Notify Slack (Prod Success)
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'mlflow-cicd'
          text: 'Model deployed to Prod successfully: ${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }}'

      - name: Rollback Prod on Failure
        if: failure()
        run: |
          if [ -f kubernetes/backups/prod-deployment-backup.yaml ]; then
            kubectl apply -f kubernetes/backups/prod-deployment-backup.yaml
            echo "Rolled back Prod deployment to previous state."
          else
            echo "No backup found for Prod rollback."
          fi
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Notify Slack (Prod Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'mlflow-cicd'
          text: 'Prod deployment failed and rolled back for ${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }} in GitHub Actions: ${{ github.job }} #${{ github.run_number }}'