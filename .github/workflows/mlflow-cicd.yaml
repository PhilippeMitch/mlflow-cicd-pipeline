name: MLflow CI/CD

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: MLflow model name
        default: adult-classifier
        required: true
      version:
        description: Model version
        default: 1.0.0
        required: true
      stage:
        description: Model stage
        required: true

jobs:
  train-and-test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7.0
        options: --entrypoint redis-server
        ports:
          - 6379:6379
        env:
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_ARGS: --requirepass ${{ secrets.REDIS_PASSWORD }}

    environment:
      name: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train Model
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        run: python scripts/train_model.py

      - name: Verify Model Metadata
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        run: |
          python -c "from mlflow.tracking import MlflowClient; \
          client = MlflowClient(); \
          versions = client.search_model_versions(\"name='adult-classifier'\"); \
          [print(f'Version: {v.version}, Created by: {v.tags.get(\"created_by\")}, Stage: {v.current_stage}, Description: {v.description}') for v in versions]"

      - name: Run tests
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          echo "Running tests for model: ${{ github.event.inputs.model_name }} version: ${{ github.event.inputs.version }}"
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "❌ SLACK_WEBHOOK_URL is not set"
          else
            echo "✅ SLACK_WEBHOOK_URL is set"
          fi
          if [ -z "$SLACK_BOT_TOKEN" ]; then
            echo "❌ SLACK_BOT_TOKEN is not set"
          else
            echo "✅ SLACK_BOT_TOKEN is set"
          fi
          if [ -z "$MLFLOW_TRACKING_URI" ]; then
            echo "❌ MLFLOW_TRACKING_URI is not set"
          else
            echo "✅ MLFLOW_TRACKING_URI is set"
          fi
          echo "Running tests..."
          pytest tests/test_model.py

      - name: Notify Slack (Test Failure)
        if: failure()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              text: "❌ *Test stage failed* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}. Check the logs for more details."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "❌ *Test stage failed* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}. Check the logs for more details."

      - name: Notify Slack (Test Success)
        if: success()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              "text": "✅ *Test stage succeeded* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "✅ *Test stage succeeded* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}."

  deploy-dev:
    needs: train-and-test
    runs-on: ubuntu-latest
    environment:
      name: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub (Dev)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/serve/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:dev-${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:dev-latest
          build-args: |
            MODEL_NAME=${{ github.event.inputs.model_name }}
            MODEL_VERSION=${{ github.event.inputs.version }}

      - name: Notify Slack (Dev Success)
        if: success()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              "text": "✅ *Dev stage succeeded* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "✅ Docker image pushed to Dev successfully: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:dev-${{ github.event.inputs.version }}`"

      - name: Notify Slack (Dev Failure)
        if: failure()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              "text": "❌ *Dev stage failed* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}. Check the logs for more details."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "❌ Dev image push failed for `${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }} in GitHub Actions: ${{ github.job }} #${{ github.run_number }}`"

  deploy-uat:
    needs: deploy-dev
    if: github.event.inputs.stage == 'Production'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub (UAT)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/serve/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:uat-${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:uat-latest
          build-args: |
            MODEL_NAME=${{ github.event.inputs.model_name }}
            MODEL_VERSION=${{ github.event.inputs.version }}

      - name: Notify Slack (UAT Success)
        if: success()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              "text": "✅ *UAT stage succeeded* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "✅ Docker image pushed to UAT successfully: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:uat-${{ github.event.inputs.version }}`"

      - name: Notify Slack (UAT Failure)
        if: failure()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              "text": "❌ *UAT stage failed* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}. Check the logs for more details."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "❌ UAT image push failed for `${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }} in GitHub Actions: ${{ github.job }} #${{ github.run_number }}`"

  deploy-prod:
    needs: deploy-uat
    if: github.event.inputs.stage == 'Production'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub (Prod)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/serve/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:prod-${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:prod-latest
          build-args: |
            MODEL_NAME=${{ github.event.inputs.model_name }}
            MODEL_VERSION=${{ github.event.inputs.version }}

      - name: Notify Slack (Prod Success)
        if: success()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              "text": "✅ *Prod stage succeeded* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "✅ Docker image pushed to Prod successfully: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.model_name }}:prod-${{ github.event.inputs.version }}`"

      - name: Notify Slack (Prod Failure)
        if: failure()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
              "text": "❌ *Prod stage failed* for `${{ github.event.inputs.model_name }}` v${{ github.event.inputs.version }} in GitHub Actions job `${{ github.job }}` run #${{ github.run_number }}. Check the logs for more details."
              blocks:
                - type: section
                  text:
                    type: mrkdwn
                    text: "❌ Prod image push failed for `${{ github.event.inputs.model_name }} v${{ github.event.inputs.version }} in GitHub Actions: ${{ github.job }} #${{ github.run_number }}`"